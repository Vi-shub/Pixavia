"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src_components_sections_Hero_jsx",{

/***/ "./src/components/sections/ThreeJsLanding.jsx":
/*!****************************************************!*\
  !*** ./src/components/sections/ThreeJsLanding.jsx ***!
  \****************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_loaders_FontLoader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/examples/jsm/loaders/FontLoader */ \"./node_modules/three/examples/jsm/loaders/FontLoader.js\");\n\nvar _s = $RefreshSig$();\n\n\n\nconst ThreeJsLanding = ()=>{\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        let environment;\n        const preload = ()=>{\n            const manager = new three__WEBPACK_IMPORTED_MODULE_2__.LoadingManager();\n            manager.onLoad = function() {\n                requestAnimationFrame(()=>{\n                    environment = new Environment(typo, particle, containerRef.current);\n                });\n            };\n            let typo = null;\n            const loader = new three_examples_jsm_loaders_FontLoader__WEBPACK_IMPORTED_MODULE_3__.FontLoader(manager);\n            const font = loader.load(\"https://res.cloudinary.com/dydre7amr/raw/upload/v1612950355/font_zsd4dr.json\", function(font) {\n                typo = font;\n            });\n            const particle = new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader(manager).load(\"https://res.cloudinary.com/dfvtkoboz/image/upload/v1605013866/particle_a64uzf.png\");\n        };\n        if (containerRef.current) {\n            preload();\n        }\n        // Add resize handler\n        const handleResize = ()=>{\n            if (environment) {\n                environment.onWindowResize();\n            }\n        };\n        window.addEventListener(\"resize\", handleResize);\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n            if (environment) {\n                var _environment_renderer, _environment_scene;\n                (_environment_renderer = environment.renderer) === null || _environment_renderer === void 0 ? void 0 : _environment_renderer.dispose();\n                (_environment_scene = environment.scene) === null || _environment_scene === void 0 ? void 0 : _environment_scene.clear();\n            }\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                id: \"magic\",\n                ref: containerRef\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\smsha\\\\Desktop\\\\onovo\\\\src\\\\components\\\\sections\\\\ThreeJsLanding.jsx\",\n                lineNumber: 56,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"playground\"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\smsha\\\\Desktop\\\\onovo\\\\src\\\\components\\\\sections\\\\ThreeJsLanding.jsx\",\n                lineNumber: 57,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"script\", {\n                type: \"x-shader/x-vertex\",\n                id: \"vertexshader\",\n                children: \"\\n          attribute float size;\\n          attribute vec3 customColor;\\n          varying vec3 vColor;\\n\\n          void main() {\\n            vColor = customColor;\\n            vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n            gl_PointSize = size * ( 300.0 / -mvPosition.z );\\n            gl_Position = projectionMatrix * mvPosition;\\n          }\\n        \"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\smsha\\\\Desktop\\\\onovo\\\\src\\\\components\\\\sections\\\\ThreeJsLanding.jsx\",\n                lineNumber: 60,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"script\", {\n                type: \"x-shader/x-fragment\",\n                id: \"fragmentshader\",\n                children: \"\\n          uniform vec3 color;\\n          uniform sampler2D pointTexture;\\n          varying vec3 vColor;\\n\\n          void main() {\\n            gl_FragColor = vec4( color * vColor, 1.0 );\\n            gl_FragColor = gl_FragColor * texture2D( pointTexture, gl_PointCoord );\\n          }\\n        \"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\smsha\\\\Desktop\\\\onovo\\\\src\\\\components\\\\sections\\\\ThreeJsLanding.jsx\",\n                lineNumber: 74,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true);\n};\n_s(ThreeJsLanding, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = ThreeJsLanding;\n// Environment class\nclass Environment {\n    bindEvents() {\n        window.addEventListener(\"resize\", this.onWindowResize.bind(this));\n    }\n    setup() {\n        this.createParticles = new CreateParticles(this.scene, this.font, this.particle, this.camera, this.renderer);\n    }\n    render() {\n        this.createParticles.render();\n        this.renderer.render(this.scene, this.camera);\n    }\n    createCamera() {\n        this.camera = new three__WEBPACK_IMPORTED_MODULE_2__.PerspectiveCamera(65, this.container.clientWidth / this.container.clientHeight, 1, 10000);\n        this.camera.position.set(0, 0, 100);\n    }\n    createRenderer() {\n        this.renderer = new three__WEBPACK_IMPORTED_MODULE_2__.WebGLRenderer({\n            antialias: true\n        });\n        this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.outputEncoding = three__WEBPACK_IMPORTED_MODULE_2__.sRGBEncoding;\n        this.container.appendChild(this.renderer.domElement);\n        // Set canvas style\n        this.renderer.domElement.style.position = \"absolute\";\n        this.renderer.domElement.style.top = \"100px\";\n        this.renderer.domElement.style.left = \"0\";\n        this.renderer.domElement.style.width = \"100%\";\n        this.renderer.domElement.style.height = \"100%\";\n        this.renderer.setAnimationLoop(()=>{\n            this.render();\n        });\n    }\n    onWindowResize() {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        this.camera.aspect = width / height;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(width, height);\n    }\n    constructor(font, particle, container){\n        this.font = font;\n        this.particle = particle;\n        this.container = container;\n        this.scene = new three__WEBPACK_IMPORTED_MODULE_2__.Scene();\n        this.createCamera();\n        this.createRenderer();\n        this.setup();\n        this.bindEvents();\n    }\n}\n// CreateParticles class (same as original)\nclass CreateParticles {\n    setup() {\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_2__.PlaneGeometry(this.visibleWidthAtZDepth(100, this.camera), this.visibleHeightAtZDepth(100, this.camera));\n        const material = new three__WEBPACK_IMPORTED_MODULE_2__.MeshBasicMaterial({\n            color: 0x00ff00,\n            transparent: true\n        });\n        this.planeArea = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(geometry, material);\n        this.planeArea.visible = false;\n        this.createText();\n    }\n    bindEvents() {\n        document.addEventListener(\"mousedown\", this.onMouseDown.bind(this));\n        document.addEventListener(\"mousemove\", this.onMouseMove.bind(this));\n        document.addEventListener(\"mouseup\", this.onMouseUp.bind(this));\n    }\n    onMouseDown() {\n        this.mouse.x = event.clientX / window.innerWidth * 2 - 1;\n        this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n        const vector = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(this.mouse.x, this.mouse.y, 0.5);\n        vector.unproject(this.camera);\n        const dir = vector.sub(this.camera.position).normalize();\n        const distance = -this.camera.position.z / dir.z;\n        this.currenPosition = this.camera.position.clone().add(dir.multiplyScalar(distance));\n        const pos = this.particles.geometry.attributes.position;\n        this.buttom = true;\n        this.data.ease = 0.01;\n    }\n    onMouseUp() {\n        this.buttom = false;\n        this.data.ease = 0.05;\n    }\n    onMouseMove() {\n        this.mouse.x = event.clientX / window.innerWidth * 2 - 1;\n        this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    }\n    render(level) {\n        const time = 0.001 * performance.now() % 12 / 12;\n        const zigzagTime = (1 + Math.sin(time * 2 * Math.PI)) / 6;\n        this.raycaster.setFromCamera(this.mouse, this.camera);\n        const intersects = this.raycaster.intersectObject(this.planeArea);\n        if (intersects.length > 0) {\n            const pos = this.particles.geometry.attributes.position;\n            const copy = this.geometryCopy.attributes.position;\n            const coulors = this.particles.geometry.attributes.customColor;\n            const size = this.particles.geometry.attributes.size;\n            const mx = intersects[0].point.x;\n            const my = intersects[0].point.y;\n            const mz = intersects[0].point.z;\n            for(var i = 0, l = pos.count; i < l; i++){\n                const initX = copy.getX(i);\n                const initY = copy.getY(i);\n                const initZ = copy.getZ(i);\n                let px = pos.getX(i);\n                let py = pos.getY(i);\n                let pz = pos.getZ(i);\n                this.colorChange.setHSL(0.5, 1, 1);\n                coulors.setXYZ(i, this.colorChange.r, this.colorChange.g, this.colorChange.b);\n                coulors.needsUpdate = true;\n                size.array[i] = this.data.particleSize;\n                size.needsUpdate = true;\n                let dx = mx - px;\n                let dy = my - py;\n                const dz = mz - pz;\n                const mouseDistance = this.distance(mx, my, px, py);\n                let d = (dx = mx - px) * dx + (dy = my - py) * dy;\n                const f = -this.data.area / d;\n                if (this.buttom) {\n                    const t = Math.atan2(dy, dx);\n                    px -= f * Math.cos(t);\n                    py -= f * Math.sin(t);\n                    this.colorChange.setHSL(0.5 + zigzagTime, 1.0, 0.5);\n                    coulors.setXYZ(i, this.colorChange.r, this.colorChange.g, this.colorChange.b);\n                    coulors.needsUpdate = true;\n                    if (px > initX + 70 || px < initX - 70 || py > initY + 70 || py < initY - 70) {\n                        this.colorChange.setHSL(0.15, 1.0, 0.5);\n                        coulors.setXYZ(i, this.colorChange.r, this.colorChange.g, this.colorChange.b);\n                        coulors.needsUpdate = true;\n                    }\n                } else {\n                    if (mouseDistance < this.data.area) {\n                        if (i % 5 == 0) {\n                            const t = Math.atan2(dy, dx);\n                            px -= 0.03 * Math.cos(t);\n                            py -= 0.03 * Math.sin(t);\n                            this.colorChange.setHSL(0.15, 1.0, 0.5);\n                            coulors.setXYZ(i, this.colorChange.r, this.colorChange.g, this.colorChange.b);\n                            coulors.needsUpdate = true;\n                            size.array[i] = this.data.particleSize / 1.2;\n                            size.needsUpdate = true;\n                        } else {\n                            const t = Math.atan2(dy, dx);\n                            px += f * Math.cos(t);\n                            py += f * Math.sin(t);\n                            pos.setXYZ(i, px, py, pz);\n                            pos.needsUpdate = true;\n                            size.array[i] = this.data.particleSize * 1.3;\n                            size.needsUpdate = true;\n                        }\n                        if (px > initX + 10 || px < initX - 10 || py > initY + 10 || py < initY - 10) {\n                            this.colorChange.setHSL(0.15, 1.0, 0.5);\n                            coulors.setXYZ(i, this.colorChange.r, this.colorChange.g, this.colorChange.b);\n                            coulors.needsUpdate = true;\n                            size.array[i] = this.data.particleSize / 1.8;\n                            size.needsUpdate = true;\n                        }\n                    }\n                }\n                px += (initX - px) * this.data.ease;\n                py += (initY - py) * this.data.ease;\n                pz += (initZ - pz) * this.data.ease;\n                pos.setXYZ(i, px, py, pz);\n                pos.needsUpdate = true;\n            }\n        }\n    }\n    createText() {\n        let thePoints = [];\n        let shapes = this.font.generateShapes(this.data.text, this.data.textSize);\n        let geometry = new three__WEBPACK_IMPORTED_MODULE_2__.ShapeGeometry(shapes);\n        geometry.computeBoundingBox();\n        const xMid = -0.5 * (geometry.boundingBox.max.x - geometry.boundingBox.min.x);\n        const yMid = (geometry.boundingBox.max.y - geometry.boundingBox.min.y) / 2.85;\n        geometry.center();\n        let holeShapes = [];\n        for(let q = 0; q < shapes.length; q++){\n            let shape = shapes[q];\n            if (shape.holes && shape.holes.length > 0) {\n                for(let j = 0; j < shape.holes.length; j++){\n                    let hole = shape.holes[j];\n                    holeShapes.push(hole);\n                }\n            }\n        }\n        shapes.push.apply(shapes, holeShapes);\n        let colors = [];\n        let sizes = [];\n        for(let x = 0; x < shapes.length; x++){\n            let shape = shapes[x];\n            const amountPoints = shape.type == \"Path\" ? this.data.amount / 2 : this.data.amount;\n            let points = shape.getSpacedPoints(amountPoints);\n            points.forEach((element, z)=>{\n                const a = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(element.x, element.y, 0);\n                thePoints.push(a);\n                colors.push(this.colorChange.r, this.colorChange.g, this.colorChange.b);\n                sizes.push(1);\n            });\n        }\n        let geoParticles = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry().setFromPoints(thePoints);\n        geoParticles.translate(xMid, yMid, 0);\n        geoParticles.setAttribute(\"customColor\", new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(colors, 3));\n        geoParticles.setAttribute(\"size\", new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(sizes, 1));\n        const material = new three__WEBPACK_IMPORTED_MODULE_2__.ShaderMaterial({\n            uniforms: {\n                color: {\n                    value: new three__WEBPACK_IMPORTED_MODULE_2__.Color(0xffffff)\n                },\n                pointTexture: {\n                    value: this.particleImg\n                }\n            },\n            vertexShader: document.getElementById(\"vertexshader\").textContent,\n            fragmentShader: document.getElementById(\"fragmentshader\").textContent,\n            blending: three__WEBPACK_IMPORTED_MODULE_2__.AdditiveBlending,\n            depthTest: false,\n            transparent: true\n        });\n        this.particles = new three__WEBPACK_IMPORTED_MODULE_2__.Points(geoParticles, material);\n        this.scene.add(this.particles);\n        this.geometryCopy = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry();\n        this.geometryCopy.copy(this.particles.geometry);\n    }\n    visibleHeightAtZDepth(depth, camera) {\n        const cameraOffset = camera.position.z;\n        if (depth < cameraOffset) depth -= cameraOffset;\n        else depth += cameraOffset;\n        const vFOV = camera.fov * Math.PI / 180;\n        return 2 * Math.tan(vFOV / 2) * Math.abs(depth);\n    }\n    visibleWidthAtZDepth(depth, camera) {\n        const height = this.visibleHeightAtZDepth(depth, camera);\n        return height * camera.aspect;\n    }\n    distance(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    }\n    constructor(scene, font, particleImg, camera, renderer){\n        this.scene = scene;\n        this.font = font;\n        this.particleImg = particleImg;\n        this.camera = camera;\n        this.renderer = renderer;\n        this.raycaster = new three__WEBPACK_IMPORTED_MODULE_2__.Raycaster();\n        this.mouse = new three__WEBPACK_IMPORTED_MODULE_2__.Vector2(-200, 200);\n        this.colorChange = new three__WEBPACK_IMPORTED_MODULE_2__.Color();\n        this.buttom = false;\n        this.data = {\n            text: \"PIXAVIA\",\n            amount: 1500,\n            particleSize: 1,\n            particleColor: 0xffffff,\n            textSize: 24,\n            area: 250,\n            ease: 0.05\n        };\n        this.setup();\n        this.bindEvents();\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (ThreeJsLanding);\nvar _c;\n$RefreshReg$(_c, \"ThreeJsLanding\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/sections/ThreeJsLanding.jsx\n"));

/***/ })

});